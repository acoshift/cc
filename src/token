abstract abstract
and and
as as
assert assert
base base
begin begin
class class
default default
delegate delegate
do do
done done
downcast downcast
downto downto
elif elif
else else
end end
exception exception
extern extern
false false
finally finally
for for
fun fun
function function
global global
if if
in in
inherit inherit
inline inline
interface interface
internal internal
lazy lazy
let let
match match
member member
module module
mutable mutable
namespace namespace
new new
null null
of of
open open
or or
override override
private private
public public
rec rec
return return
sig sig
static static
struct struct
then then
to to
true true
try try
type type
upcast upcast
use use
val val
void void
when when
while while
with with
yield yield
atomic atomic
break break
checked checked
component component
const const
constraint constraint
constructor constructor
continue continue
eager eager
fixed fixed
fori fori
functor functor
include include
measure measure
method method
mixin mixin
object object
parallel parallel
params params
process process
protected protected
pure pure
recursive recursive
sealed sealed
tailcall tailcall
trait trait
virtual virtual
volatile volatile
let! let!
use! use!
do! do!
yield! yield!
return! return!
line line
'|' \|
'->' ->
'<-' <-
'.' \.
':' :
'(' \(
')' \)
'[' \[
']' \]
'[<' \[<
'>]' >\]
'[|' \|\[
'|]' \|\]
'{' \{
'}' \}
':?>' :\?>
':?' :\?
':>' :>
'..' \.\.
'::' ::
':=' :=
';;' ;;
';' ;
'=' =
'_' _
'?' \?
'??' \?\?
'(*)' \(\*\)
'<@' <@
'@>' @>
'<@@' <@@
'@@>' @@>
'~' ~
'`' `
'#' #
'!' !
'%' %
'&' &
'*' \*
'+' \+
'-' -
'/' /
'<' <
'>' >
'@' @
'^' \^
'?<-' \?<-
'$' \$
',' ,
'&&' &&
'||' \|\|
''' '
'"' "
'\' \\
__SKIP__whitespace-or-newline (\n|\r\n|\s+)
__SKIP__block-comment \(\*((?!\*\)).)*\*\)
__SKIP__end-of-line-comment //[^\n\r]*(\n|\r\n)
if-directive #if\s+[a-zA-Z_]([a-zA-Z0-9_'])*
else-directive #else
endif-directive #endif
ident (([a-zA-Z_]([a-zA-Z0-9_'])*)|(``(([^`]|\n|\r\n|\t)|`([^`]|\n|\r\n|\t))+``))
reserved-ident-formats [a-zA-Z_]([a-zA-Z0-9_'])*(!|#)
char '([^\n\t\r'\\"]|(\\["\\'ntbrafv])|(\\[0-9][0-9][0-9])|(\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]))'
string "([^\n\t\r'\\"]|(\\["\\'ntbrafv])|(\\[^"\\'ntbrafv])|(\\[0-9][0-9][0-9])|(\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])|(\\U[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])|(\n|\r\n))*"
verbatim-string @"([^\n\t\r'\\"]|(\\[^"\\'ntbrafv])|(\n|\r\n)|\\|"")*"
bytechar '([^\n\t\r'\\"]|(\\["\\'ntbrafv]))'B
bytearray "([^\n\t\r'\\"]|(\\["\\'ntbrafv])|(\\[^"\\'ntbrafv])|(\\[0-9][0-9][0-9])|(\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])|(\\U[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])|(\n|\r\n))*"B
verbatim-bytearray @"([^\n\t\r'\\"]|(\\[^"\\'ntbrafv])|(\n|\r\n)|\\|"")*"B
triple-quoted-string """((?!""")(.|\n|\r\n|\t))*"""
sbyte (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))y
byte (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))uy
int16 (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))s
uint16 (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))us
int32 (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))l
uint32 (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))(ul|u)
nativeint (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))n
unativeint (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))un
int64 (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))L
uint64 (([0-9]+)|((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+)))(UL|uL)
ieee32 ((([0-9]+\.[0-9]*)|([0-9]+(\.[0-9]*)?[eE][\+-]?[0-9]+))[Ff])|(((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+))lf)
ieee64 (([0-9]+\.[0-9]*)|([0-9]+(\.[0-9]*)?[eE][\+-]?[0-9]+))|(((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+))LF)
bignum ([0-9]+)[QRZING]
decimal ((([0-9]+\.[0-9]*)|([0-9]+(\.[0-9]*)?[eE][\+-]?[0-9]+))|([0-9]+))[Mm]
int ([0-9]+)
xint ((0[xX][0-9A-Fa-f]+)|(0[oO][0-7]+)|(0[bB][0-1]+))

#ifndef CC_GRAMMAR_H_
#define CC_GRAMMAR_H_

#include <string>

struct GrammarCell
{
    ::std::string nonterminal;
    int num_terms;
};

const GrammarCell kGrammar[] = 
{
  { "program", 2 },
  { "program'", 2 },
  { "program'", 0 },
  { "statement", 2 },
  { "statement", 3 },
  { "statement", 1 },
  { "function-defn", 4 },
  { "function-defn", 5 },
  { "function-defn", 4 },
  { "function-defn", 5 },
  { "function-defn-arguments", 2 },
  { "function-defn-arguments", 0 },
  { "block-st", 3 },
  { "block-st", 2 },
  { "expr", 1 },
  { "expr", 1 },
  { "expr", 2 },
  { "expr", 1 },
  { "expr", 1 },
  { "expr", 3 },
  { "expr", 3 },
  { "expr", 5 },
  { "expr", 5 },
  { "expr", 7 },
  { "expr", 3 },
  { "expr", 2 },
  { "expr", 2 },
  { "expr", 2 },
  { "expr", 3 },
  { "expr", 3 },
  { "expr", 1 },
  { "expr", 1 },
  { "slice-range", 2 },
  { "slice-range", 2 },
  { "slice-range", 3 },
  { "slice-range", 1 },
  { "if-expr", 4 },
  { "if-expr", 6 },
  { "match-expr", 6 },
  { "match-patterns", 2 },
  { "match-patterns", 0 },
  { "match-pattern", 4 },
  { "match-pattern", 6 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 1 },
  { "infix-op", 2 },
  { "infix-op", 2 },
  { "infix-op", 1 },
  { "infix-op", 2 },
  { "infix-op", 1 },
  { "infix-op", 2 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 1 },
  { "const", 2 },
  { "const", 1 },
  { "const", 1 },
};

const int kGrammarCount = 84;

#endif  // CC_GRAMMAR_H_
